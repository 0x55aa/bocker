#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail; shopt -s nullglob
btrfs_path='/var/bocker';
function bocker_check() {
[[ "$1" == 'img' ]] && TYPE='image'
[[ "$1" == 'ps' ]] && TYPE='container'
[[ "$1" == '' ]] && TYPE='container or image'
if [[ "$2" == "$1"* ]]; then
	if btrfs subvolume list "$btrfs_path" | grep -qw "$2"; then
		return 0
	fi
fi
echo "No $TYPE named '$2' exists" && exit 1
}
function bocker_init() {
if [[ -d "$1" ]]; then
	uuid="img_$(shuf -i 10000-99999 -n 1)"
	btrfs subvolume create "$btrfs_path/$uuid" > /dev/null
	cp -rf --reflink=auto "$1"/* "$btrfs_path/$uuid" > /dev/null
	echo "Created: $uuid"
else
	echo "No directory named '$1' exists"
fi
}
function bocker_rm() {
bocker_check '' "$1"
btrfs subvolume delete "$btrfs_path/$1" > /dev/null
echo "Removed: $1"
}
function bocker_images() {
echo -e "IMAGE_ID"
for img in "$btrfs_path"/img_*; do
	basename "$img"
done
}
function bocker_ps() {
echo -e "CONTAINER_ID\t\tCOMMAND"
for ps in "$btrfs_path"/ps_*; do
	ps=$(basename "$ps")
	echo -e "$ps\t\t$(cat "$btrfs_path/$ps/$ps.cmd")"
done
}
function bocker_run() {
bocker_check 'img' "$1"
cmd=${@:2}
uuid="ps_$(shuf -i 10000-99999 -n 1)"
ip link add dev veth0_"$uuid" type veth peer name veth1_"$uuid"
ip link set dev veth0_"$uuid" up
ip link set veth0_"$uuid" master bridge0
ip netns add netns_"$uuid"
ip link set veth1_"$uuid" netns netns_"$uuid"
ip netns exec netns_"$uuid" ip link set dev lo up
ip netns exec netns_"$uuid" ip addr add 10.0.0.2/24 dev veth1_"$uuid"
ip netns exec netns_"$uuid" ip link set dev veth1_"$uuid" up
ip netns exec netns_"$uuid" ip route add default via 10.0.0.1
btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$uuid" > /dev/null
echo 'nameserver 8.8.8.8' > "$btrfs_path/$uuid"/etc/resolv.conf
echo "$cmd" > "$btrfs_path/$uuid/$uuid.cmd"
ip netns exec netns_"$uuid" "unshare" -fp --mount-proc "chroot" \
	"$btrfs_path/$uuid" /bin/sh -c "/bin/mount -t proc proc /proc && $cmd" \
	2>&1 | tee "$btrfs_path/$uuid/$uuid.log" || true
ip link del dev veth0_"$uuid"
ip netns del netns_"$uuid"
}
function bocker_logs() {
bocker_check 'ps' "$1"
cat "$btrfs_path/$1/$1.log"
}
function bocker_commit() {
bocker_check 'ps' "$1" && bocker_check 'img' "$2" && bocker_rm "$2"
btrfs subvolume snapshot "$btrfs_path/$1" "$btrfs_path/$2" > /dev/null
echo "Created: $2"
}
function bocker_help() {
echo -e "Create an image: \n\t./bocker init <image_directory>\n"
echo -e "List images: \n\t./bocker images\n"
echo -e "Create a container: \n\t./bocker run <image_id> <command>\n"
echo -e "List containers: \n\t./bocker ps\n"
echo -e "View logs from a container: \n\t./bocker logs <container_id>\n"
echo -e "Delete an image or container: \n\t./bocker rm <image_or_container_id>"
exit 0
}
[[ -z "${1-}" ]] && bocker_help
case $1 in
	init|rm|images|ps|run|logs|commit) bocker_"$1" "${@:2}" ;;
	*) bocker_help ;;
esac
